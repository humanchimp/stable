import { describe as createSuite } from "./describe";
import { required } from "./required";
import {
  ISuite,
  DslThunk,
  DslDescribeBlock,
  DslDescribeEachBlock,
  DslItBlock,
  DslInfoBlock,
  DslHookBlock,
} from "../interfaces";

export async function dethunk(
  thunk: DslThunk,
  {
    listeners = {},
    /* description, */
  } = {},
): Promise<ISuite> {
  let suite: ISuite = createSuite(null, null, { listeners });

  // The queue is for capturing each asynchronous step which are dynamically,
  // asynchronously generated by the DSL.
  const queue = [];

  const describeBlock = dslDescribe("describe");
  const xdescribeBlock = dslDescribe("xdescribe");
  const fdescribeBlock = dslDescribe("fdescribe");
  const describeEachBlock = dslDescribeEach("describeEach");
  const xdescribeEachBlock = dslDescribeEach("xdescribeEach");
  const fdescribeEachBlock = dslDescribeEach("fdescribeEach");

  describeBlock.skip = xdescribeBlock;
  describeBlock.only = fdescribeBlock;
  describeBlock.each = describeEachBlock;
  xdescribeBlock.each = xdescribeEachBlock;
  fdescribeBlock.each = fdescribeEachBlock;
  describeEachBlock.skip = xdescribeEachBlock;
  describeEachBlock.only = fdescribeEachBlock;

  const itBlock = dslIt("it");
  const xitBlock = dslIt("xit");
  const fitBlock = dslIt("fit");

  itBlock.skip = xitBlock;
  itBlock.only = fitBlock;

  thunk(
    describeBlock,
    xdescribeBlock,
    fdescribeBlock,
    describeEachBlock,
    xdescribeEachBlock,
    fdescribeEachBlock,
    itBlock,
    xitBlock,
    fitBlock,
    dslHook("beforeAll"),
    dslHook("afterAll"),
    dslHook("beforeEach"),
    dslHook("afterEach"),
    dslInfo("info"),
  );

  // We simply wait for each item in the queue to complete. Thanks to the
  // iterator protocol, this code is straightforward and handles the growing
  // queue gracefully. :mindblown:
  for (const next of queue) {
    await next();
  }

  // Focus mode propagates across sibling suites!
  suite.isFocusMode = suite.suites.some(suite => suite.isDeeplyFocused);

  return suite;

  function dslDescribe(block: string): DslDescribeBlock {
    return (description, closure = required()) => {
      suite[block](description, s => {
        queue.push(async () => {
          const p = suite;

          suite = s;
          await closure();

          suite = p;
        });
      });
      return suite.suites[suite.suites.length - 1];
    };
  }

  function dslDescribeEach(block: string): DslDescribeEachBlock {
    return (description, table, closure = required()) => {
      suite[block](description, table, (s, table) => {
        queue.push(async () => {
          const p = suite;

          suite = s;
          await closure(table);

          suite = p;
        });
      });
      return suite.suites[suite.suites.length - 1];
    };
  }

  function dslIt(block: string): DslItBlock {
    return (description, closure) => {
      suite[block](description, closure);
      return suite.specs[suite.specs.length - 1];
    };
  }

  function dslHook(block: string): DslHookBlock {
    return closure => {
      suite[block](closure);
    };
  }

  function dslInfo(block: string): DslInfoBlock {
    return (...rest: any[]) => {
      suite[block](...rest);
    };
  }
}
